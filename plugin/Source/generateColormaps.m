function generateColormaps(smaps,nVals)
%GENERATECOLORMAPS Generates and writes colomaps to a file
%
%   Usage: generateColormaps(maps)
%
%   Input parameters:
%         smaps      : Map(s)
%         nVals      : Number of values
%
%   smaps should be a string or a cell array of strings defining a name of
%   of function which can be called like:
%
%      map(nVals)
%
%   and returns a 3x nVals matrix of colors. Similarly, 


if nargin<2
    error('Too few input args.');
end

filename = 'ltfatColormaps.h';


cmaps = {}; cmapnames = {};
[cmaps, cmapnames ]= parseInput(smaps,nVals,cmaps,cmapnames);
cmapsUint32 = convertToARGB(cmaps);


% Write to a file
basepath = which(mfilename);
basepath = basepath(1:end-numel(mfilename)-2);

[fileID,message] = fopen([basepath,filename],'w');

expstring = ...
sprintf(['/*\n This file is autogenerated. Do not edit! \n', ...
 'Generated by running %s() ', ...
 '*/\n'],mfilename);


filename_ = strrep(filename,'.','_');
fprintf(fileID,expstring);
fprintf(fileID,'#ifndef _%s\n',filename_);
fprintf(fileID,'#define _%s\n',filename_);
fprintf(fileID,'namespace ltfat \n{\n');

for ii=1:numel(cmapsUint32)
    betaString = sprintf('%u,\n ', cmapsUint32{ii} );
    fprintf(fileID,'const int cmap%iLen = %i;\n',ii,numel(cmapsUint32{ii}));
    fprintf(fileID,'const char* cmap%iName = "%s";\n',ii,cmapnames{ii});
    fprintf(fileID,'const uint32 cmap%i[]={\n %s};\n',ii,betaString(1:end-1));
end

fprintf(fileID,'}\n');
fprintf(fileID,'#endif');


function [cmaps,cmapnames ] = parseInput(smaps,nVals,cmaps,cmapnames)

if ischar(smaps) 
    cmaps{end+1} = feval(smaps,nVals);
    cmapnames{end+1} = smaps;
elseif isa(smaps,'function_handle')
    cmaps{end+1} = feval(smaps,nVals);
    cmapnames{end+1} = func2str(smaps);
elseif iscell(smaps)
    for ii=1:numel(smaps)
        [cmaps,cmapnames ] = parseInput(smaps{ii},nVals,cmaps,cmapnames);
    end
    return;
end


function out = convertToARGB(in)

if iscell(in)
    out = {};
    for ii=1:numel(in)
         out{end+1} = convertToARGB(in{ii});
    end
    return
end

out = bitshift(repmat(uint32(255),[size(in,1),1]),24) + ...
      bitshift(uint32(255*in(:,1)),16) + ...
      bitshift(uint32(255*in(:,2)),8) + ...
      uint32(255*in(:,3));






